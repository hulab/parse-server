"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = void 0;

var _graphql = require("graphql");

var _graphqlListFields = _interopRequireDefault(require("graphql-list-fields"));

var defaultGraphQLTypes = _interopRequireWildcard(require("./defaultGraphQLTypes"));

var objectsQueries = _interopRequireWildcard(require("./objectsQueries"));

var parseClassTypes = _interopRequireWildcard(require("./parseClassTypes"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const load = (parseGraphQLSchema, parseClass) => {
  const className = parseClass.className;
  const {
    classGraphQLOutputType,
    classGraphQLFindArgs,
    classGraphQLFindResultType
  } = parseGraphQLSchema.parseClassTypes[className];
  const getGraphQLQueryName = `get${className}`;
  parseGraphQLSchema.graphQLObjectsQueries[getGraphQLQueryName] = {
    description: `The ${getGraphQLQueryName} query can be used to get an object of the ${className} class by its id.`,
    args: {
      objectId: defaultGraphQLTypes.OBJECT_ID_ATT,
      readPreference: defaultGraphQLTypes.READ_PREFERENCE_ATT,
      includeReadPreference: defaultGraphQLTypes.INCLUDE_READ_PREFERENCE_ATT
    },
    type: new _graphql.GraphQLNonNull(classGraphQLOutputType),

    async resolve(_source, args, context, queryInfo) {
      try {
        const {
          objectId,
          readPreference,
          includeReadPreference
        } = args;
        const {
          config,
          auth,
          info
        } = context;
        const selectedFields = (0, _graphqlListFields.default)(queryInfo);
        const {
          keys,
          include
        } = parseClassTypes.extractKeysAndInclude(selectedFields);
        return await objectsQueries.getObject(className, objectId, keys, include, readPreference, includeReadPreference, config, auth, info);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  };
  const findGraphQLQueryName = `find${className}`;
  parseGraphQLSchema.graphQLObjectsQueries[findGraphQLQueryName] = {
    description: `The ${findGraphQLQueryName} query can be used to find objects of the ${className} class.`,
    args: classGraphQLFindArgs,
    type: new _graphql.GraphQLNonNull(classGraphQLFindResultType),

    async resolve(_source, args, context, queryInfo) {
      try {
        const {
          where,
          order,
          skip,
          limit,
          readPreference,
          includeReadPreference,
          subqueryReadPreference
        } = args;
        const {
          config,
          auth,
          info
        } = context;
        const selectedFields = (0, _graphqlListFields.default)(queryInfo);
        const {
          keys,
          include
        } = parseClassTypes.extractKeysAndInclude(selectedFields.filter(field => field.includes('.')).map(field => field.slice(field.indexOf('.') + 1)));
        const parseOrder = order && order.join(',');
        return await objectsQueries.findObjects(className, where, parseOrder, skip, limit, keys, include, false, readPreference, includeReadPreference, subqueryReadPreference, config, auth, info, selectedFields.map(field => field.split('.', 1)[0]));
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }

  };
};

exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,