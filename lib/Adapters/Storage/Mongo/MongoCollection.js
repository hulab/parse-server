"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const AWSXRay = require('hulab-xray-sdk');

const mongodb = require('mongodb');

const Collection = mongodb.Collection;

class MongoCollection {
  constructor(mongoCollection) {
    this._mongoCollection = mongoCollection;
  } // Does a find with "smart indexing".
  // Currently this just means, if it needs a geoindex and there is
  // none, then build the geoindex.
  // This could be improved a lot but it's not clear if that's a good
  // idea. Or even if this behavior is a good idea.


  find(query, {
    skip,
    limit,
    sort,
    keys,
    maxTimeMS,
    readPreference,
    hint,
    caseInsensitive,
    explain
  } = {}) {
    // Support for Full Text Search - $text
    if (keys && keys.$score) {
      delete keys.$score;
      keys.score = {
        $meta: 'textScore'
      };
    }

    return this._executeWithTrace('find', this._rawFind(query, {
      skip,
      limit,
      sort,
      keys,
      maxTimeMS,
      readPreference,
      hint,
      caseInsensitive,
      explain
    }), query).catch(error => {
      // Check for "no geoindex" error
      if (error.code != 17007 && !error.message.match(/unable to find index for .geoNear/)) {
        throw error;
      } // Figure out what key needs an index


      const key = error.message.match(/field=([A-Za-z_0-9]+) /)[1];

      if (!key) {
        throw error;
      }

      var index = {};
      index[key] = '2d';
      return this._mongoCollection.createIndex(index) // Retry, but just once.
      .then(() => this._executeWithTrace('find', this._rawFind(query, {
        skip,
        limit,
        sort,
        keys,
        maxTimeMS,
        readPreference,
        hint,
        caseInsensitive,
        explain
      })));
    });
  }
  /**
   * Collation to support case insensitive queries
   */


  static caseInsensitiveCollation() {
    return {
      locale: 'en_US',
      strength: 2
    };
  }

  _rawFind(query, {
    skip,
    limit,
    sort,
    keys,
    maxTimeMS,
    readPreference,
    hint,
    caseInsensitive,
    explain
  } = {}) {
    let findOperation = this._mongoCollection.find(query, {
      skip,
      limit,
      sort,
      readPreference,
      hint
    });

    if (keys) {
      findOperation = findOperation.project(keys);
    }

    if (caseInsensitive) {
      findOperation = findOperation.collation(MongoCollection.caseInsensitiveCollation());
    }

    if (maxTimeMS) {
      findOperation = findOperation.maxTimeMS(maxTimeMS);
    }

    return explain ? findOperation.explain(explain) : findOperation.toArray();
  }

  count(query, {
    skip,
    limit,
    sort,
    maxTimeMS,
    readPreference,
    hint
  } = {}) {
    // If query is empty, then use estimatedDocumentCount instead.
    // This is due to countDocuments performing a scan,
    // which greatly increases execution time when being run on large collections.
    // See https://github.com/Automattic/mongoose/issues/6713 for more info regarding this problem.
    if (typeof query !== 'object' || !Object.keys(query).length) {
      return this._executeWithTrace('estimatedDocumentCount', this._mongoCollection.estimatedDocumentCount({
        maxTimeMS
      }));
    }

    const countOperation = this._executeWithTrace('countDocuments', this._mongoCollection.countDocuments(query, {
      skip,
      limit,
      sort,
      maxTimeMS,
      readPreference,
      hint
    }));

    return countOperation;
  }

  distinct(field, query) {
    return this._executeWithTrace('distinct', this._mongoCollection.distinct(field, query));
  }

  aggregate(pipeline, {
    maxTimeMS,
    readPreference,
    hint,
    explain
  } = {}) {
    return this._executeWithTrace('aggregate', this._mongoCollection.aggregate(pipeline, {
      maxTimeMS,
      readPreference,
      hint,
      explain
    }).toArray());
  }

  insertOne(object, session) {
    return this._executeWithTrace('insertOne', this._mongoCollection.insertOne(object, {
      session
    }));
  }

  insertMany(object, session) {
    return this._executeWithTrace('insertMany', this._mongoCollection.insertMany(object, {
      session
    }));
  } // Atomically updates data in the database for a single (first) object that matched the query
  // If there is nothing that matches the query - does insert
  // Postgres Note: `INSERT ... ON CONFLICT UPDATE` that is available since 9.5.


  upsertOne(query, update, session) {
    return this._executeWithTrace('upsertOne', this._mongoCollection.updateOne(query, update, {
      upsert: true,
      session
    }));
  }

  updateOne(query, update) {
    return this._executeWithTrace('updateOne', this._mongoCollection.updateOne(query, update));
  }

  updateMany(query, update, session) {
    return this._executeWithTrace('updateMany', this._mongoCollection.updateMany(query, update, {
      session
    }));
  }

  deleteMany(query, session) {
    return this._executeWithTrace('deleteMany', this._mongoCollection.deleteMany(query, {
      session
    }));
  }

  bulkWrite(operations, session) {
    return this._executeWithTrace('bulkwrite', this._mongoCollection.bulkWrite(operations, {
      ordered: false,
      session
    }));
  }

  _ensureSparseUniqueIndexInBackground(indexRequest) {
    return new Promise((resolve, reject) => {
      this._mongoCollection.createIndex(indexRequest, {
        unique: true,
        background: true,
        sparse: true
      }, error => {
        if (error) {
          reject(error);
        } else {
          resolve();
        }
      });
    });
  }

  drop() {
    return this._mongoCollection.drop();
  }

  _executeWithTrace(type, fn, query) {
    const parent = AWSXRay.getSegment();

    if (!parent) {
      return fn;
    }

    return new Promise((resolve, reject) => {
      AWSXRay.captureAsyncFunc(`MongoDB Atlas`, subsegment => {
        try {
          subsegment && subsegment.addAttribute('namespace', 'aws');
          subsegment.addAttribute('aws', {
            region: process.env.AWS_REGION,
            database: 'mapstr',
            operation: `${type.toUpperCase()} ${this._mongoCollection.collectionName}`,
            type,
            collection: this._mongoCollection.collectionName,
            retries: 0
          });
          subsegment && subsegment.addAnnotation('Collection', this._mongoCollection.collectionName);
          subsegment && subsegment.addAnnotation('Operation', type);

          if (query && typeof query === "object") {
            subsegment && subsegment.addMetadata('Query', JSON.stringify(query));
          }
        } catch (error) {//
        }

        fn.then(function (result) {
          resolve(result);
          subsegment && subsegment.addAttribute('http', {
            response: {
              status: 200
            }
          });
          subsegment && subsegment.close();
        }, function (error) {
          reject(error);
          subsegment && subsegment.close(error);
        });
      });
    });
  }

}

exports.default = MongoCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9BZGFwdGVycy9TdG9yYWdlL01vbmdvL01vbmdvQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6WyJBV1NYUmF5IiwicmVxdWlyZSIsIm1vbmdvZGIiLCJDb2xsZWN0aW9uIiwiTW9uZ29Db2xsZWN0aW9uIiwiY29uc3RydWN0b3IiLCJtb25nb0NvbGxlY3Rpb24iLCJfbW9uZ29Db2xsZWN0aW9uIiwiZmluZCIsInF1ZXJ5Iiwic2tpcCIsImxpbWl0Iiwic29ydCIsImtleXMiLCJtYXhUaW1lTVMiLCJyZWFkUHJlZmVyZW5jZSIsImhpbnQiLCJjYXNlSW5zZW5zaXRpdmUiLCJleHBsYWluIiwiJHNjb3JlIiwic2NvcmUiLCIkbWV0YSIsIl9leGVjdXRlV2l0aFRyYWNlIiwiX3Jhd0ZpbmQiLCJjYXRjaCIsImVycm9yIiwiY29kZSIsIm1lc3NhZ2UiLCJtYXRjaCIsImtleSIsImluZGV4IiwiY3JlYXRlSW5kZXgiLCJ0aGVuIiwiY2FzZUluc2Vuc2l0aXZlQ29sbGF0aW9uIiwibG9jYWxlIiwic3RyZW5ndGgiLCJmaW5kT3BlcmF0aW9uIiwicHJvamVjdCIsImNvbGxhdGlvbiIsInRvQXJyYXkiLCJjb3VudCIsIk9iamVjdCIsImxlbmd0aCIsImVzdGltYXRlZERvY3VtZW50Q291bnQiLCJjb3VudE9wZXJhdGlvbiIsImNvdW50RG9jdW1lbnRzIiwiZGlzdGluY3QiLCJmaWVsZCIsImFnZ3JlZ2F0ZSIsInBpcGVsaW5lIiwiaW5zZXJ0T25lIiwib2JqZWN0Iiwic2Vzc2lvbiIsImluc2VydE1hbnkiLCJ1cHNlcnRPbmUiLCJ1cGRhdGUiLCJ1cGRhdGVPbmUiLCJ1cHNlcnQiLCJ1cGRhdGVNYW55IiwiZGVsZXRlTWFueSIsImJ1bGtXcml0ZSIsIm9wZXJhdGlvbnMiLCJvcmRlcmVkIiwiX2Vuc3VyZVNwYXJzZVVuaXF1ZUluZGV4SW5CYWNrZ3JvdW5kIiwiaW5kZXhSZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ1bmlxdWUiLCJiYWNrZ3JvdW5kIiwic3BhcnNlIiwiZHJvcCIsInR5cGUiLCJmbiIsInBhcmVudCIsImdldFNlZ21lbnQiLCJjYXB0dXJlQXN5bmNGdW5jIiwic3Vic2VnbWVudCIsImFkZEF0dHJpYnV0ZSIsInJlZ2lvbiIsInByb2Nlc3MiLCJlbnYiLCJBV1NfUkVHSU9OIiwiZGF0YWJhc2UiLCJvcGVyYXRpb24iLCJ0b1VwcGVyQ2FzZSIsImNvbGxlY3Rpb25OYW1lIiwiY29sbGVjdGlvbiIsInJldHJpZXMiLCJhZGRBbm5vdGF0aW9uIiwiYWRkTWV0YWRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzdWx0IiwicmVzcG9uc2UiLCJzdGF0dXMiLCJjbG9zZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQXZCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsTUFBTUUsVUFBVSxHQUFHRCxPQUFPLENBQUNDLFVBQTNCOztBQUVlLE1BQU1DLGVBQU4sQ0FBc0I7QUFHbkNDLEVBQUFBLFdBQVcsQ0FBQ0MsZUFBRCxFQUE4QjtBQUN2QyxTQUFLQyxnQkFBTCxHQUF3QkQsZUFBeEI7QUFDRCxHQUxrQyxDQU9uQztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUUsRUFBQUEsSUFBSSxDQUNGQyxLQURFLEVBRUY7QUFBRUMsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQSxLQUFSO0FBQWVDLElBQUFBLElBQWY7QUFBcUJDLElBQUFBLElBQXJCO0FBQTJCQyxJQUFBQSxTQUEzQjtBQUFzQ0MsSUFBQUEsY0FBdEM7QUFBc0RDLElBQUFBLElBQXREO0FBQTREQyxJQUFBQSxlQUE1RDtBQUE2RUMsSUFBQUE7QUFBN0UsTUFBeUYsRUFGdkYsRUFHRjtBQUNBO0FBQ0EsUUFBSUwsSUFBSSxJQUFJQSxJQUFJLENBQUNNLE1BQWpCLEVBQXlCO0FBQ3ZCLGFBQU9OLElBQUksQ0FBQ00sTUFBWjtBQUNBTixNQUFBQSxJQUFJLENBQUNPLEtBQUwsR0FBYTtBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVCxPQUFiO0FBQ0Q7O0FBRUQsV0FBTyxLQUFLQyxpQkFBTCxDQUNMLE1BREssRUFFTCxLQUFLQyxRQUFMLENBQWNkLEtBQWQsRUFBcUI7QUFDbkJDLE1BQUFBLElBRG1CO0FBRW5CQyxNQUFBQSxLQUZtQjtBQUduQkMsTUFBQUEsSUFIbUI7QUFJbkJDLE1BQUFBLElBSm1CO0FBS25CQyxNQUFBQSxTQUxtQjtBQU1uQkMsTUFBQUEsY0FObUI7QUFPbkJDLE1BQUFBLElBUG1CO0FBUW5CQyxNQUFBQSxlQVJtQjtBQVNuQkMsTUFBQUE7QUFUbUIsS0FBckIsQ0FGSyxFQVlEVCxLQVpDLEVBYUxlLEtBYkssQ0FhQ0MsS0FBSyxJQUFJO0FBQ2Y7QUFDQSxVQUFJQSxLQUFLLENBQUNDLElBQU4sSUFBYyxLQUFkLElBQXVCLENBQUNELEtBQUssQ0FBQ0UsT0FBTixDQUFjQyxLQUFkLENBQW9CLG1DQUFwQixDQUE1QixFQUFzRjtBQUNwRixjQUFNSCxLQUFOO0FBQ0QsT0FKYyxDQUtmOzs7QUFDQSxZQUFNSSxHQUFHLEdBQUdKLEtBQUssQ0FBQ0UsT0FBTixDQUFjQyxLQUFkLENBQW9CLHdCQUFwQixFQUE4QyxDQUE5QyxDQUFaOztBQUNBLFVBQUksQ0FBQ0MsR0FBTCxFQUFVO0FBQ1IsY0FBTUosS0FBTjtBQUNEOztBQUVELFVBQUlLLEtBQUssR0FBRyxFQUFaO0FBQ0FBLE1BQUFBLEtBQUssQ0FBQ0QsR0FBRCxDQUFMLEdBQWEsSUFBYjtBQUNBLGFBQ0UsS0FBS3RCLGdCQUFMLENBQ0d3QixXQURILENBQ2VELEtBRGYsRUFFRTtBQUZGLE9BR0dFLElBSEgsQ0FHUSxNQUNKLEtBQUtWLGlCQUFMLENBQ0UsTUFERixFQUVFLEtBQUtDLFFBQUwsQ0FBY2QsS0FBZCxFQUFxQjtBQUNuQkMsUUFBQUEsSUFEbUI7QUFFbkJDLFFBQUFBLEtBRm1CO0FBR25CQyxRQUFBQSxJQUhtQjtBQUluQkMsUUFBQUEsSUFKbUI7QUFLbkJDLFFBQUFBLFNBTG1CO0FBTW5CQyxRQUFBQSxjQU5tQjtBQU9uQkMsUUFBQUEsSUFQbUI7QUFRbkJDLFFBQUFBLGVBUm1CO0FBU25CQyxRQUFBQTtBQVRtQixPQUFyQixDQUZGLENBSkosQ0FERjtBQXFCRCxLQS9DTSxDQUFQO0FBZ0REO0FBRUQ7Ozs7O0FBR0EsU0FBT2Usd0JBQVAsR0FBa0M7QUFDaEMsV0FBTztBQUFFQyxNQUFBQSxNQUFNLEVBQUUsT0FBVjtBQUFtQkMsTUFBQUEsUUFBUSxFQUFFO0FBQTdCLEtBQVA7QUFDRDs7QUFFRFosRUFBQUEsUUFBUSxDQUNOZCxLQURNLEVBRU47QUFBRUMsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQSxLQUFSO0FBQWVDLElBQUFBLElBQWY7QUFBcUJDLElBQUFBLElBQXJCO0FBQTJCQyxJQUFBQSxTQUEzQjtBQUFzQ0MsSUFBQUEsY0FBdEM7QUFBc0RDLElBQUFBLElBQXREO0FBQTREQyxJQUFBQSxlQUE1RDtBQUE2RUMsSUFBQUE7QUFBN0UsTUFBeUYsRUFGbkYsRUFHTjtBQUNBLFFBQUlrQixhQUFhLEdBQUcsS0FBSzdCLGdCQUFMLENBQXNCQyxJQUF0QixDQUEyQkMsS0FBM0IsRUFBa0M7QUFDcERDLE1BQUFBLElBRG9EO0FBRXBEQyxNQUFBQSxLQUZvRDtBQUdwREMsTUFBQUEsSUFIb0Q7QUFJcERHLE1BQUFBLGNBSm9EO0FBS3BEQyxNQUFBQTtBQUxvRCxLQUFsQyxDQUFwQjs7QUFRQSxRQUFJSCxJQUFKLEVBQVU7QUFDUnVCLE1BQUFBLGFBQWEsR0FBR0EsYUFBYSxDQUFDQyxPQUFkLENBQXNCeEIsSUFBdEIsQ0FBaEI7QUFDRDs7QUFFRCxRQUFJSSxlQUFKLEVBQXFCO0FBQ25CbUIsTUFBQUEsYUFBYSxHQUFHQSxhQUFhLENBQUNFLFNBQWQsQ0FBd0JsQyxlQUFlLENBQUM2Qix3QkFBaEIsRUFBeEIsQ0FBaEI7QUFDRDs7QUFFRCxRQUFJbkIsU0FBSixFQUFlO0FBQ2JzQixNQUFBQSxhQUFhLEdBQUdBLGFBQWEsQ0FBQ3RCLFNBQWQsQ0FBd0JBLFNBQXhCLENBQWhCO0FBQ0Q7O0FBRUQsV0FBT0ksT0FBTyxHQUFHa0IsYUFBYSxDQUFDbEIsT0FBZCxDQUFzQkEsT0FBdEIsQ0FBSCxHQUFvQ2tCLGFBQWEsQ0FBQ0csT0FBZCxFQUFsRDtBQUNEOztBQUVEQyxFQUFBQSxLQUFLLENBQUMvQixLQUFELEVBQVE7QUFBRUMsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQSxLQUFSO0FBQWVDLElBQUFBLElBQWY7QUFBcUJFLElBQUFBLFNBQXJCO0FBQWdDQyxJQUFBQSxjQUFoQztBQUFnREMsSUFBQUE7QUFBaEQsTUFBeUQsRUFBakUsRUFBcUU7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJLE9BQU9QLEtBQVAsS0FBaUIsUUFBakIsSUFBNkIsQ0FBQ2dDLE1BQU0sQ0FBQzVCLElBQVAsQ0FBWUosS0FBWixFQUFtQmlDLE1BQXJELEVBQTZEO0FBQzNELGFBQU8sS0FBS3BCLGlCQUFMLENBQ0wsd0JBREssRUFFTCxLQUFLZixnQkFBTCxDQUFzQm9DLHNCQUF0QixDQUE2QztBQUMzQzdCLFFBQUFBO0FBRDJDLE9BQTdDLENBRkssQ0FBUDtBQU1EOztBQUVELFVBQU04QixjQUFjLEdBQUcsS0FBS3RCLGlCQUFMLENBQ3JCLGdCQURxQixFQUVyQixLQUFLZixnQkFBTCxDQUFzQnNDLGNBQXRCLENBQXFDcEMsS0FBckMsRUFBNEM7QUFDMUNDLE1BQUFBLElBRDBDO0FBRTFDQyxNQUFBQSxLQUYwQztBQUcxQ0MsTUFBQUEsSUFIMEM7QUFJMUNFLE1BQUFBLFNBSjBDO0FBSzFDQyxNQUFBQSxjQUwwQztBQU0xQ0MsTUFBQUE7QUFOMEMsS0FBNUMsQ0FGcUIsQ0FBdkI7O0FBWUEsV0FBTzRCLGNBQVA7QUFDRDs7QUFFREUsRUFBQUEsUUFBUSxDQUFDQyxLQUFELEVBQVF0QyxLQUFSLEVBQWU7QUFDckIsV0FBTyxLQUFLYSxpQkFBTCxDQUNMLFVBREssRUFFTCxLQUFLZixnQkFBTCxDQUFzQnVDLFFBQXRCLENBQStCQyxLQUEvQixFQUFzQ3RDLEtBQXRDLENBRkssQ0FBUDtBQUlEOztBQUVEdUMsRUFBQUEsU0FBUyxDQUFDQyxRQUFELEVBQVc7QUFBRW5DLElBQUFBLFNBQUY7QUFBYUMsSUFBQUEsY0FBYjtBQUE2QkMsSUFBQUEsSUFBN0I7QUFBbUNFLElBQUFBO0FBQW5DLE1BQStDLEVBQTFELEVBQThEO0FBQ3JFLFdBQU8sS0FBS0ksaUJBQUwsQ0FDTCxXQURLLEVBRUwsS0FBS2YsZ0JBQUwsQ0FDR3lDLFNBREgsQ0FDYUMsUUFEYixFQUN1QjtBQUFFbkMsTUFBQUEsU0FBRjtBQUFhQyxNQUFBQSxjQUFiO0FBQTZCQyxNQUFBQSxJQUE3QjtBQUFtQ0UsTUFBQUE7QUFBbkMsS0FEdkIsRUFFR3FCLE9BRkgsRUFGSyxDQUFQO0FBTUQ7O0FBRURXLEVBQUFBLFNBQVMsQ0FBQ0MsTUFBRCxFQUFTQyxPQUFULEVBQWtCO0FBQ3pCLFdBQU8sS0FBSzlCLGlCQUFMLENBQ0wsV0FESyxFQUVMLEtBQUtmLGdCQUFMLENBQXNCMkMsU0FBdEIsQ0FBZ0NDLE1BQWhDLEVBQXdDO0FBQUVDLE1BQUFBO0FBQUYsS0FBeEMsQ0FGSyxDQUFQO0FBSUQ7O0FBRURDLEVBQUFBLFVBQVUsQ0FBQ0YsTUFBRCxFQUFTQyxPQUFULEVBQWtCO0FBQzFCLFdBQU8sS0FBSzlCLGlCQUFMLENBQ0wsWUFESyxFQUVMLEtBQUtmLGdCQUFMLENBQXNCOEMsVUFBdEIsQ0FBaUNGLE1BQWpDLEVBQXlDO0FBQUVDLE1BQUFBO0FBQUYsS0FBekMsQ0FGSyxDQUFQO0FBSUQsR0FuS2tDLENBcUtuQztBQUNBO0FBQ0E7OztBQUNBRSxFQUFBQSxTQUFTLENBQUM3QyxLQUFELEVBQVE4QyxNQUFSLEVBQWdCSCxPQUFoQixFQUF5QjtBQUNoQyxXQUFPLEtBQUs5QixpQkFBTCxDQUNMLFdBREssRUFFTCxLQUFLZixnQkFBTCxDQUFzQmlELFNBQXRCLENBQWdDL0MsS0FBaEMsRUFBdUM4QyxNQUF2QyxFQUErQztBQUM3Q0UsTUFBQUEsTUFBTSxFQUFFLElBRHFDO0FBRTdDTCxNQUFBQTtBQUY2QyxLQUEvQyxDQUZLLENBQVA7QUFPRDs7QUFFREksRUFBQUEsU0FBUyxDQUFDL0MsS0FBRCxFQUFROEMsTUFBUixFQUFnQjtBQUN2QixXQUFPLEtBQUtqQyxpQkFBTCxDQUNMLFdBREssRUFFTCxLQUFLZixnQkFBTCxDQUFzQmlELFNBQXRCLENBQWdDL0MsS0FBaEMsRUFBdUM4QyxNQUF2QyxDQUZLLENBQVA7QUFJRDs7QUFFREcsRUFBQUEsVUFBVSxDQUFDakQsS0FBRCxFQUFROEMsTUFBUixFQUFnQkgsT0FBaEIsRUFBeUI7QUFDakMsV0FBTyxLQUFLOUIsaUJBQUwsQ0FDTCxZQURLLEVBRUwsS0FBS2YsZ0JBQUwsQ0FBc0JtRCxVQUF0QixDQUFpQ2pELEtBQWpDLEVBQXdDOEMsTUFBeEMsRUFBZ0Q7QUFBRUgsTUFBQUE7QUFBRixLQUFoRCxDQUZLLENBQVA7QUFJRDs7QUFFRE8sRUFBQUEsVUFBVSxDQUFDbEQsS0FBRCxFQUFRMkMsT0FBUixFQUFpQjtBQUN6QixXQUFPLEtBQUs5QixpQkFBTCxDQUNMLFlBREssRUFFTCxLQUFLZixnQkFBTCxDQUFzQm9ELFVBQXRCLENBQWlDbEQsS0FBakMsRUFBd0M7QUFBRTJDLE1BQUFBO0FBQUYsS0FBeEMsQ0FGSyxDQUFQO0FBSUQ7O0FBRURRLEVBQUFBLFNBQVMsQ0FBQ0MsVUFBRCxFQUFhVCxPQUFiLEVBQXNCO0FBQzdCLFdBQU8sS0FBSzlCLGlCQUFMLENBQ0wsV0FESyxFQUVMLEtBQUtmLGdCQUFMLENBQXNCcUQsU0FBdEIsQ0FBZ0NDLFVBQWhDLEVBQTRDO0FBQUVDLE1BQUFBLE9BQU8sRUFBRSxLQUFYO0FBQWtCVixNQUFBQTtBQUFsQixLQUE1QyxDQUZLLENBQVA7QUFJRDs7QUFFRFcsRUFBQUEsb0NBQW9DLENBQUNDLFlBQUQsRUFBZTtBQUNqRCxXQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdEMsV0FBSzVELGdCQUFMLENBQXNCd0IsV0FBdEIsQ0FDRWlDLFlBREYsRUFFRTtBQUFFSSxRQUFBQSxNQUFNLEVBQUUsSUFBVjtBQUFnQkMsUUFBQUEsVUFBVSxFQUFFLElBQTVCO0FBQWtDQyxRQUFBQSxNQUFNLEVBQUU7QUFBMUMsT0FGRixFQUdFN0MsS0FBSyxJQUFJO0FBQ1AsWUFBSUEsS0FBSixFQUFXO0FBQ1QwQyxVQUFBQSxNQUFNLENBQUMxQyxLQUFELENBQU47QUFDRCxTQUZELE1BRU87QUFDTHlDLFVBQUFBLE9BQU87QUFDUjtBQUNGLE9BVEg7QUFXRCxLQVpNLENBQVA7QUFhRDs7QUFFREssRUFBQUEsSUFBSSxHQUFHO0FBQ0wsV0FBTyxLQUFLaEUsZ0JBQUwsQ0FBc0JnRSxJQUF0QixFQUFQO0FBQ0Q7O0FBRURqRCxFQUFBQSxpQkFBaUIsQ0FBQ2tELElBQUQsRUFBT0MsRUFBUCxFQUFXaEUsS0FBWCxFQUFrQjtBQUNqQyxVQUFNaUUsTUFBTSxHQUFHMUUsT0FBTyxDQUFDMkUsVUFBUixFQUFmOztBQUNBLFFBQUksQ0FBQ0QsTUFBTCxFQUFhO0FBQ1gsYUFBT0QsRUFBUDtBQUNEOztBQUNELFdBQU8sSUFBSVIsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUN0Q25FLE1BQUFBLE9BQU8sQ0FBQzRFLGdCQUFSLENBQTBCLGVBQTFCLEVBQTBDQyxVQUFVLElBQUk7QUFDdEQsWUFBSTtBQUNGQSxVQUFBQSxVQUFVLElBQUlBLFVBQVUsQ0FBQ0MsWUFBWCxDQUF3QixXQUF4QixFQUFxQyxLQUFyQyxDQUFkO0FBQ0FELFVBQUFBLFVBQVUsQ0FBQ0MsWUFBWCxDQUF3QixLQUF4QixFQUErQjtBQUFDQyxZQUFBQSxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxVQUFyQjtBQUFpQ0MsWUFBQUEsUUFBUSxFQUFFLFFBQTNDO0FBQXFEQyxZQUFBQSxTQUFTLEVBQUcsR0FBRVosSUFBSSxDQUFDYSxXQUFMLEVBQW1CLElBQUcsS0FBSzlFLGdCQUFMLENBQXNCK0UsY0FBZSxFQUE5SDtBQUFpSWQsWUFBQUEsSUFBakk7QUFBdUllLFlBQUFBLFVBQVUsRUFBRSxLQUFLaEYsZ0JBQUwsQ0FBc0IrRSxjQUF6SztBQUF5TEUsWUFBQUEsT0FBTyxFQUFFO0FBQWxNLFdBQS9CO0FBQ0FYLFVBQUFBLFVBQVUsSUFBSUEsVUFBVSxDQUFDWSxhQUFYLENBQXlCLFlBQXpCLEVBQXVDLEtBQUtsRixnQkFBTCxDQUFzQitFLGNBQTdELENBQWQ7QUFDQVQsVUFBQUEsVUFBVSxJQUFJQSxVQUFVLENBQUNZLGFBQVgsQ0FBeUIsV0FBekIsRUFBc0NqQixJQUF0QyxDQUFkOztBQUNBLGNBQUkvRCxLQUFLLElBQUksT0FBT0EsS0FBUCxLQUFpQixRQUE5QixFQUF3QztBQUN0Q29FLFlBQUFBLFVBQVUsSUFBSUEsVUFBVSxDQUFDYSxXQUFYLENBQXVCLE9BQXZCLEVBQWdDQyxJQUFJLENBQUNDLFNBQUwsQ0FBZW5GLEtBQWYsQ0FBaEMsQ0FBZDtBQUNEO0FBQ0YsU0FSRCxDQVFFLE9BQU9nQixLQUFQLEVBQWMsQ0FDZDtBQUNEOztBQUNEZ0QsUUFBQUEsRUFBRSxDQUFDekMsSUFBSCxDQUNFLFVBQVM2RCxNQUFULEVBQWlCO0FBQ2YzQixVQUFBQSxPQUFPLENBQUMyQixNQUFELENBQVA7QUFDQWhCLFVBQUFBLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxZQUFYLENBQXdCLE1BQXhCLEVBQWdDO0FBQUNnQixZQUFBQSxRQUFRLEVBQUU7QUFBQ0MsY0FBQUEsTUFBTSxFQUFFO0FBQVQ7QUFBWCxXQUFoQyxDQUFkO0FBQ0FsQixVQUFBQSxVQUFVLElBQUlBLFVBQVUsQ0FBQ21CLEtBQVgsRUFBZDtBQUNELFNBTEgsRUFNRSxVQUFTdkUsS0FBVCxFQUFnQjtBQUNkMEMsVUFBQUEsTUFBTSxDQUFDMUMsS0FBRCxDQUFOO0FBQ0FvRCxVQUFBQSxVQUFVLElBQUlBLFVBQVUsQ0FBQ21CLEtBQVgsQ0FBaUJ2RSxLQUFqQixDQUFkO0FBQ0QsU0FUSDtBQVdELE9BdkJEO0FBd0JELEtBekJNLENBQVA7QUEwQkQ7O0FBalFrQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXU1hSYXkgPSByZXF1aXJlKCdodWxhYi14cmF5LXNkaycpO1xuY29uc3QgbW9uZ29kYiA9IHJlcXVpcmUoJ21vbmdvZGInKTtcbmNvbnN0IENvbGxlY3Rpb24gPSBtb25nb2RiLkNvbGxlY3Rpb247XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbmdvQ29sbGVjdGlvbiB7XG4gIF9tb25nb0NvbGxlY3Rpb246IENvbGxlY3Rpb247XG5cbiAgY29uc3RydWN0b3IobW9uZ29Db2xsZWN0aW9uOiBDb2xsZWN0aW9uKSB7XG4gICAgdGhpcy5fbW9uZ29Db2xsZWN0aW9uID0gbW9uZ29Db2xsZWN0aW9uO1xuICB9XG5cbiAgLy8gRG9lcyBhIGZpbmQgd2l0aCBcInNtYXJ0IGluZGV4aW5nXCIuXG4gIC8vIEN1cnJlbnRseSB0aGlzIGp1c3QgbWVhbnMsIGlmIGl0IG5lZWRzIGEgZ2VvaW5kZXggYW5kIHRoZXJlIGlzXG4gIC8vIG5vbmUsIHRoZW4gYnVpbGQgdGhlIGdlb2luZGV4LlxuICAvLyBUaGlzIGNvdWxkIGJlIGltcHJvdmVkIGEgbG90IGJ1dCBpdCdzIG5vdCBjbGVhciBpZiB0aGF0J3MgYSBnb29kXG4gIC8vIGlkZWEuIE9yIGV2ZW4gaWYgdGhpcyBiZWhhdmlvciBpcyBhIGdvb2QgaWRlYS5cbiAgZmluZChcbiAgICBxdWVyeSxcbiAgICB7IHNraXAsIGxpbWl0LCBzb3J0LCBrZXlzLCBtYXhUaW1lTVMsIHJlYWRQcmVmZXJlbmNlLCBoaW50LCBjYXNlSW5zZW5zaXRpdmUsIGV4cGxhaW4gfSA9IHt9XG4gICkge1xuICAgIC8vIFN1cHBvcnQgZm9yIEZ1bGwgVGV4dCBTZWFyY2ggLSAkdGV4dFxuICAgIGlmIChrZXlzICYmIGtleXMuJHNjb3JlKSB7XG4gICAgICBkZWxldGUga2V5cy4kc2NvcmU7XG4gICAgICBrZXlzLnNjb3JlID0geyAkbWV0YTogJ3RleHRTY29yZScgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZVdpdGhUcmFjZShcbiAgICAgICdmaW5kJyxcbiAgICAgIHRoaXMuX3Jhd0ZpbmQocXVlcnksIHtcbiAgICAgICAgc2tpcCxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHNvcnQsXG4gICAgICAgIGtleXMsXG4gICAgICAgIG1heFRpbWVNUyxcbiAgICAgICAgcmVhZFByZWZlcmVuY2UsXG4gICAgICAgIGhpbnQsXG4gICAgICAgIGNhc2VJbnNlbnNpdGl2ZSxcbiAgICAgICAgZXhwbGFpbixcbiAgICAgIH0pLCBxdWVyeVxuICAgICkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgLy8gQ2hlY2sgZm9yIFwibm8gZ2VvaW5kZXhcIiBlcnJvclxuICAgICAgaWYgKGVycm9yLmNvZGUgIT0gMTcwMDcgJiYgIWVycm9yLm1lc3NhZ2UubWF0Y2goL3VuYWJsZSB0byBmaW5kIGluZGV4IGZvciAuZ2VvTmVhci8pKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgLy8gRmlndXJlIG91dCB3aGF0IGtleSBuZWVkcyBhbiBpbmRleFxuICAgICAgY29uc3Qga2V5ID0gZXJyb3IubWVzc2FnZS5tYXRjaCgvZmllbGQ9KFtBLVphLXpfMC05XSspIC8pWzFdO1xuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IHt9O1xuICAgICAgaW5kZXhba2V5XSA9ICcyZCc7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLl9tb25nb0NvbGxlY3Rpb25cbiAgICAgICAgICAuY3JlYXRlSW5kZXgoaW5kZXgpXG4gICAgICAgICAgLy8gUmV0cnksIGJ1dCBqdXN0IG9uY2UuXG4gICAgICAgICAgLnRoZW4oKCkgPT5cbiAgICAgICAgICAgIHRoaXMuX2V4ZWN1dGVXaXRoVHJhY2UoXG4gICAgICAgICAgICAgICdmaW5kJyxcbiAgICAgICAgICAgICAgdGhpcy5fcmF3RmluZChxdWVyeSwge1xuICAgICAgICAgICAgICAgIHNraXAsXG4gICAgICAgICAgICAgICAgbGltaXQsXG4gICAgICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgICAgICBrZXlzLFxuICAgICAgICAgICAgICAgIG1heFRpbWVNUyxcbiAgICAgICAgICAgICAgICByZWFkUHJlZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBoaW50LFxuICAgICAgICAgICAgICAgIGNhc2VJbnNlbnNpdGl2ZSxcbiAgICAgICAgICAgICAgICBleHBsYWluLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29sbGF0aW9uIHRvIHN1cHBvcnQgY2FzZSBpbnNlbnNpdGl2ZSBxdWVyaWVzXG4gICAqL1xuICBzdGF0aWMgY2FzZUluc2Vuc2l0aXZlQ29sbGF0aW9uKCkge1xuICAgIHJldHVybiB7IGxvY2FsZTogJ2VuX1VTJywgc3RyZW5ndGg6IDIgfTtcbiAgfVxuXG4gIF9yYXdGaW5kKFxuICAgIHF1ZXJ5LFxuICAgIHsgc2tpcCwgbGltaXQsIHNvcnQsIGtleXMsIG1heFRpbWVNUywgcmVhZFByZWZlcmVuY2UsIGhpbnQsIGNhc2VJbnNlbnNpdGl2ZSwgZXhwbGFpbiB9ID0ge31cbiAgKSB7XG4gICAgbGV0IGZpbmRPcGVyYXRpb24gPSB0aGlzLl9tb25nb0NvbGxlY3Rpb24uZmluZChxdWVyeSwge1xuICAgICAgc2tpcCxcbiAgICAgIGxpbWl0LFxuICAgICAgc29ydCxcbiAgICAgIHJlYWRQcmVmZXJlbmNlLFxuICAgICAgaGludCxcbiAgICB9KTtcblxuICAgIGlmIChrZXlzKSB7XG4gICAgICBmaW5kT3BlcmF0aW9uID0gZmluZE9wZXJhdGlvbi5wcm9qZWN0KGtleXMpO1xuICAgIH1cblxuICAgIGlmIChjYXNlSW5zZW5zaXRpdmUpIHtcbiAgICAgIGZpbmRPcGVyYXRpb24gPSBmaW5kT3BlcmF0aW9uLmNvbGxhdGlvbihNb25nb0NvbGxlY3Rpb24uY2FzZUluc2Vuc2l0aXZlQ29sbGF0aW9uKCkpO1xuICAgIH1cblxuICAgIGlmIChtYXhUaW1lTVMpIHtcbiAgICAgIGZpbmRPcGVyYXRpb24gPSBmaW5kT3BlcmF0aW9uLm1heFRpbWVNUyhtYXhUaW1lTVMpO1xuICAgIH1cblxuICAgIHJldHVybiBleHBsYWluID8gZmluZE9wZXJhdGlvbi5leHBsYWluKGV4cGxhaW4pIDogZmluZE9wZXJhdGlvbi50b0FycmF5KCk7XG4gIH1cblxuICBjb3VudChxdWVyeSwgeyBza2lwLCBsaW1pdCwgc29ydCwgbWF4VGltZU1TLCByZWFkUHJlZmVyZW5jZSwgaGludCB9ID0ge30pIHtcbiAgICAvLyBJZiBxdWVyeSBpcyBlbXB0eSwgdGhlbiB1c2UgZXN0aW1hdGVkRG9jdW1lbnRDb3VudCBpbnN0ZWFkLlxuICAgIC8vIFRoaXMgaXMgZHVlIHRvIGNvdW50RG9jdW1lbnRzIHBlcmZvcm1pbmcgYSBzY2FuLFxuICAgIC8vIHdoaWNoIGdyZWF0bHkgaW5jcmVhc2VzIGV4ZWN1dGlvbiB0aW1lIHdoZW4gYmVpbmcgcnVuIG9uIGxhcmdlIGNvbGxlY3Rpb25zLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9tb25nb29zZS9pc3N1ZXMvNjcxMyBmb3IgbW9yZSBpbmZvIHJlZ2FyZGluZyB0aGlzIHByb2JsZW0uXG4gICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ29iamVjdCcgfHwgIU9iamVjdC5rZXlzKHF1ZXJ5KS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlV2l0aFRyYWNlKFxuICAgICAgICAnZXN0aW1hdGVkRG9jdW1lbnRDb3VudCcsXG4gICAgICAgIHRoaXMuX21vbmdvQ29sbGVjdGlvbi5lc3RpbWF0ZWREb2N1bWVudENvdW50KHtcbiAgICAgICAgICBtYXhUaW1lTVMsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGNvdW50T3BlcmF0aW9uID0gdGhpcy5fZXhlY3V0ZVdpdGhUcmFjZShcbiAgICAgICdjb3VudERvY3VtZW50cycsXG4gICAgICB0aGlzLl9tb25nb0NvbGxlY3Rpb24uY291bnREb2N1bWVudHMocXVlcnksIHtcbiAgICAgICAgc2tpcCxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHNvcnQsXG4gICAgICAgIG1heFRpbWVNUyxcbiAgICAgICAgcmVhZFByZWZlcmVuY2UsXG4gICAgICAgIGhpbnQsXG4gICAgICB9KVxuICAgICk7XG5cbiAgICByZXR1cm4gY291bnRPcGVyYXRpb247XG4gIH1cblxuICBkaXN0aW5jdChmaWVsZCwgcXVlcnkpIHtcbiAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZVdpdGhUcmFjZShcbiAgICAgICdkaXN0aW5jdCcsXG4gICAgICB0aGlzLl9tb25nb0NvbGxlY3Rpb24uZGlzdGluY3QoZmllbGQsIHF1ZXJ5KVxuICAgICk7XG4gIH1cblxuICBhZ2dyZWdhdGUocGlwZWxpbmUsIHsgbWF4VGltZU1TLCByZWFkUHJlZmVyZW5jZSwgaGludCwgZXhwbGFpbiB9ID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZVdpdGhUcmFjZShcbiAgICAgICdhZ2dyZWdhdGUnLFxuICAgICAgdGhpcy5fbW9uZ29Db2xsZWN0aW9uXG4gICAgICAgIC5hZ2dyZWdhdGUocGlwZWxpbmUsIHsgbWF4VGltZU1TLCByZWFkUHJlZmVyZW5jZSwgaGludCwgZXhwbGFpbiB9KVxuICAgICAgICAudG9BcnJheSgpXG4gICAgKTtcbiAgfVxuXG4gIGluc2VydE9uZShvYmplY3QsIHNlc3Npb24pIHtcbiAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZVdpdGhUcmFjZShcbiAgICAgICdpbnNlcnRPbmUnLFxuICAgICAgdGhpcy5fbW9uZ29Db2xsZWN0aW9uLmluc2VydE9uZShvYmplY3QsIHsgc2Vzc2lvbiB9KVxuICAgICk7XG4gIH1cblxuICBpbnNlcnRNYW55KG9iamVjdCwgc2Vzc2lvbikge1xuICAgIHJldHVybiB0aGlzLl9leGVjdXRlV2l0aFRyYWNlKFxuICAgICAgJ2luc2VydE1hbnknLFxuICAgICAgdGhpcy5fbW9uZ29Db2xsZWN0aW9uLmluc2VydE1hbnkob2JqZWN0LCB7IHNlc3Npb24gfSlcbiAgICApO1xuICB9XG5cbiAgLy8gQXRvbWljYWxseSB1cGRhdGVzIGRhdGEgaW4gdGhlIGRhdGFiYXNlIGZvciBhIHNpbmdsZSAoZmlyc3QpIG9iamVjdCB0aGF0IG1hdGNoZWQgdGhlIHF1ZXJ5XG4gIC8vIElmIHRoZXJlIGlzIG5vdGhpbmcgdGhhdCBtYXRjaGVzIHRoZSBxdWVyeSAtIGRvZXMgaW5zZXJ0XG4gIC8vIFBvc3RncmVzIE5vdGU6IGBJTlNFUlQgLi4uIE9OIENPTkZMSUNUIFVQREFURWAgdGhhdCBpcyBhdmFpbGFibGUgc2luY2UgOS41LlxuICB1cHNlcnRPbmUocXVlcnksIHVwZGF0ZSwgc2Vzc2lvbikge1xuICAgIHJldHVybiB0aGlzLl9leGVjdXRlV2l0aFRyYWNlKFxuICAgICAgJ3Vwc2VydE9uZScsXG4gICAgICB0aGlzLl9tb25nb0NvbGxlY3Rpb24udXBkYXRlT25lKHF1ZXJ5LCB1cGRhdGUsIHtcbiAgICAgICAgdXBzZXJ0OiB0cnVlLFxuICAgICAgICBzZXNzaW9uLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlT25lKHF1ZXJ5LCB1cGRhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZVdpdGhUcmFjZShcbiAgICAgICd1cGRhdGVPbmUnLFxuICAgICAgdGhpcy5fbW9uZ29Db2xsZWN0aW9uLnVwZGF0ZU9uZShxdWVyeSwgdXBkYXRlKVxuICAgICk7XG4gIH1cblxuICB1cGRhdGVNYW55KHF1ZXJ5LCB1cGRhdGUsIHNlc3Npb24pIHtcbiAgICByZXR1cm4gdGhpcy5fZXhlY3V0ZVdpdGhUcmFjZShcbiAgICAgICd1cGRhdGVNYW55JyxcbiAgICAgIHRoaXMuX21vbmdvQ29sbGVjdGlvbi51cGRhdGVNYW55KHF1ZXJ5LCB1cGRhdGUsIHsgc2Vzc2lvbiB9KVxuICAgICk7XG4gIH1cblxuICBkZWxldGVNYW55KHF1ZXJ5LCBzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGVXaXRoVHJhY2UoXG4gICAgICAnZGVsZXRlTWFueScsXG4gICAgICB0aGlzLl9tb25nb0NvbGxlY3Rpb24uZGVsZXRlTWFueShxdWVyeSwgeyBzZXNzaW9uIH0pXG4gICAgKTtcbiAgfVxuXG4gIGJ1bGtXcml0ZShvcGVyYXRpb25zLCBzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGVXaXRoVHJhY2UoXG4gICAgICAnYnVsa3dyaXRlJyxcbiAgICAgIHRoaXMuX21vbmdvQ29sbGVjdGlvbi5idWxrV3JpdGUob3BlcmF0aW9ucywgeyBvcmRlcmVkOiBmYWxzZSwgc2Vzc2lvbiB9KVxuICAgICk7XG4gIH1cblxuICBfZW5zdXJlU3BhcnNlVW5pcXVlSW5kZXhJbkJhY2tncm91bmQoaW5kZXhSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX21vbmdvQ29sbGVjdGlvbi5jcmVhdGVJbmRleChcbiAgICAgICAgaW5kZXhSZXF1ZXN0LFxuICAgICAgICB7IHVuaXF1ZTogdHJ1ZSwgYmFja2dyb3VuZDogdHJ1ZSwgc3BhcnNlOiB0cnVlIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBkcm9wKCkge1xuICAgIHJldHVybiB0aGlzLl9tb25nb0NvbGxlY3Rpb24uZHJvcCgpO1xuICB9XG5cbiAgX2V4ZWN1dGVXaXRoVHJhY2UodHlwZSwgZm4sIHF1ZXJ5KSB7XG4gICAgY29uc3QgcGFyZW50ID0gQVdTWFJheS5nZXRTZWdtZW50KCk7XG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIEFXU1hSYXkuY2FwdHVyZUFzeW5jRnVuYyhgTW9uZ29EQiBBdGxhc2AsIHN1YnNlZ21lbnQgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHN1YnNlZ21lbnQgJiYgc3Vic2VnbWVudC5hZGRBdHRyaWJ1dGUoJ25hbWVzcGFjZScsICdhd3MnKTtcbiAgICAgICAgICBzdWJzZWdtZW50LmFkZEF0dHJpYnV0ZSgnYXdzJywge3JlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiwgZGF0YWJhc2U6ICdtYXBzdHInLCBvcGVyYXRpb246IGAke3R5cGUudG9VcHBlckNhc2UoKX0gJHt0aGlzLl9tb25nb0NvbGxlY3Rpb24uY29sbGVjdGlvbk5hbWV9YCwgdHlwZSwgY29sbGVjdGlvbjogdGhpcy5fbW9uZ29Db2xsZWN0aW9uLmNvbGxlY3Rpb25OYW1lLCByZXRyaWVzOiAwfSk7XG4gICAgICAgICAgc3Vic2VnbWVudCAmJiBzdWJzZWdtZW50LmFkZEFubm90YXRpb24oJ0NvbGxlY3Rpb24nLCB0aGlzLl9tb25nb0NvbGxlY3Rpb24uY29sbGVjdGlvbk5hbWUpO1xuICAgICAgICAgIHN1YnNlZ21lbnQgJiYgc3Vic2VnbWVudC5hZGRBbm5vdGF0aW9uKCdPcGVyYXRpb24nLCB0eXBlKTtcbiAgICAgICAgICBpZiAocXVlcnkgJiYgdHlwZW9mIHF1ZXJ5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBzdWJzZWdtZW50ICYmIHN1YnNlZ21lbnQuYWRkTWV0YWRhdGEoJ1F1ZXJ5JywgSlNPTi5zdHJpbmdpZnkocXVlcnkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy9cbiAgICAgICAgfVxuICAgICAgICBmbi50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgc3Vic2VnbWVudCAmJiBzdWJzZWdtZW50LmFkZEF0dHJpYnV0ZSgnaHR0cCcsIHtyZXNwb25zZToge3N0YXR1czogMjAwfX0pO1xuICAgICAgICAgICAgc3Vic2VnbWVudCAmJiBzdWJzZWdtZW50LmNsb3NlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHN1YnNlZ21lbnQgJiYgc3Vic2VnbWVudC5jbG9zZShlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==